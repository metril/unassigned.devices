Menu="UnassignedDevicesSettings:1"
Title="Common Settings"
Tag="unlink"
---
<?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin			= "unassigned.devices";
$docroot		= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once "plugins/$plugin/include/lib.php";

$config_file = $paths['config_file'];
$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
$cfg['Config']['common_cmd']		= $cfg['Config']['common_cmd'] ?? '';
$cfg['Config']['destructive_mode']	= $cfg['Config']['destructive_mode'] ?? '';
$cfg['Config']['automount_usb']		= $cfg['Config']['automount_usb'] ?? '';
$cfg['Config']['discard']			= $cfg['Config']['discard'] ?? '';
$cfg['Config']['symlinks']			= $cfg['Config']['symlinks'] ?? '';
$cfg['Config']['zvols']				= $cfg['Config']['zvols'] ?? '';
$cfg['Config']['remote_share_wait']	= $cfg['Config']['remote_share_wait'] ?? '';
$cfg['Config']['smb_version']		= $cfg['Config']['smb_version'] ?? '';
$cfg['Config']['nfs_version']		= $cfg['Config']['nfs_version'] ?? '';
$cfg['Config']['debug_level']		= $cfg['Config']['debug_level'] ?? '';

/* See if conditions are set for destructive mode to be enabled. */
$parted = file_exists("/usr/sbin/parted");
if ((! $parted) && ($cfg['Config']['destructive_mode'] == "enabled")) {
	$cfg['Config']['destructive_mode'] = "disabled";
}
?>

<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>" >

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>

<style type="text/css">
	.fileTree {
		border: solid 1px #BBB;
		background: #FFF;
		overflow: scroll;
		padding: 5px;
		position:absolute;
		z-index:100;
		display:none;
		color:initial;
	}
</style>

<script type="text/javascript">
	function openFileBrowser(el, root, filter = true, on_folders = true, on_files = true) {
		if (! filter && ! on_files)	{
			filter = 'HIDE_FILES_FILTER';
		}
		var p = $(el);

		/* Skip if fileTree is already open. */
		if (! p.next().hasClass('fileTree') ){
			/* create a random id */
			var r = Math.floor((Math.random()*1000)+1);

			/* Add a new span and load fileTree. */
			p.after("<span id='fileTree"+r+"' class='textarea fileTree'></span>");
			var ft = $('#fileTree'+r);
			ft.fileTree({
					root: root,
					top:  root,
					filter: filter,
					allowBrowsing : true
				},
				function(file){if(on_files){p.val(file);ft.slideUp('fast',function (){ft.remove();});};p.trigger('change');},
				function(folder){if(on_folders){p.val(folder);$(ft).slideUp('fast',function (){$(ft).remove();});};p.trigger('change');}
			);

			/* Format fileTree according to parent position, height and width */
			ft.css({'left':p.position().left,'top':( p.position().top + p.outerHeight() ),'width':(p.width()) });

			/* close if click elsewhere. */
			$(document).mouseup(function(e){if (! ft.is(e.target) && ft.has(e.target).length === 0){ft.slideUp('fast',function (){$(ft).remove();});}});

			/* close if parent changed. */
			p.bind('keydown',function(){ft.slideUp('fast',function (){$(ft).remove();});});

			/* Open fileTree */
			ft.slideDown('fast');
		} else {
			return null;
		}
	} 

	function prepareSecurity(el) {
		$("#smb_security").css("display", ( $(el).val() == "no" || $(el).val() == "public" ? "none" : "block") );
	}
</script>

<table class="tablesorter shift ups">
<thead><tr><th>_(Common Settings)_</th></tr></thead>
</table>

<form markdown="1" name="common_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="unassigned.devices/unassigned.devices.cfg">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="save">

<?if (! $parted):?>
:ud_settings_plus_plug:
> **Note:** Install <a href='/Apps?search=unassigned%20devices%20plus'>Unassigned Devices Plus</a> in order to mount apfs, HFS+, and exFAT disk formats, and enable desctrctive mode.

:end
<?endif;?>

_(Common Script)_:
: <input type="text" name="common_cmd" style="width:40%;" onclick="openFileBrowser(this,'/boot/config/plugins/<?=$plugin;?>', 'sh');" autocomplete="off" value="<?=$cfg['Config']['common_cmd'];?>">

:ud_settings_common_script_plug:
> If set, this script will run before the device script. The action is in the environment variable **$ACTION**. Be sure you reference all commands with their full path.
:end

_(Destructive Mode)_:
: <select name="destructive_mode" size="1" <?if (! $parted):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["destructive_mode"], "disabled", "_(Disabled)_");?>
  <?=mk_option($cfg["Config"]["destructive_mode"], "enabled", "_(Enabled)_");?>
  </select><?if (! $parted):?>&nbsp;_(Install)_&nbsp;<a href='/Apps?search=unassigned%20devices%20plus'>Unassigned Devices Plus</a>&nbsp;_(to enable Destructive Mode)_.<?endif;?>

:ud_settings_destructive_plug:
> If enabled, this will allow you to erase and format partitions using Unassigned Devices. This cannot be enabled unless the 'Unassigned Devices Plus' plugin is installed.
:end

_(Auto Mount USB Devices)_?
: <select name="automount_usb" size="1">
  <?=mk_option($cfg["Config"]["automount_usb"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["automount_usb"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_mount_usb_devices_plug:
> When set to **Yes**, will auto mount a new USB device and share it without user intervention.
:end

_(Mount SSDs with 'discard' option)_?
: <select name="discard" size="1">
  <?=mk_option($cfg["Config"]["discard"], "yes", "_(Yes)_");?>
  <?=mk_option($cfg["Config"]["discard"], "no", "_(No)_");?>
  </select>

:ud_settings_discard_plug:
> Mount SSDs that support discard with 'discard' option. If you are using the SSD Trim Settings to do a periodic trim of SSDs you can set this to **No**.
:end

_(Legacy Mount Point Compatibility)_?
: <select name="symlinks" size="1">
  <?=mk_option($cfg["Config"]["symlinks"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["symlinks"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_symlinks_plug:
> Set to **Yes** to create symlinks for /mnt/remotes/ at /mnt/disks/.
>
> This is for backwards compatibility of VM and Docker Container mappings to the /mnt/disks/ mount point.
> You are encouraged to change your mappings to the /mnt/remotes/ mount point.
>
> If you do not need the backwards compatibility, leave it set to **No**.
:end

_(Show ZFS Volumes on Disks)_?
: <select name="zvols" size="1">
  <?=mk_option($cfg["Config"]["zvols"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["zvols"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_zvols_plug:
> Enable to show the ZFS Volumes found on mounted disks. You can control mounting the ZFS Volumes in the Device Settings.
:end

_(Remote Share Mount Wait Time)_ :
: <input type="text" name="remote_share_wait" class="narrow" maxlength="4" value="<?=$cfg['Config']['remote_share_wait'];?>" placeholder="5">

:ud_settings_remote_share_wait_plug:
> This is the time in seconds to wait before mounting remote shares when the array is first started.
>
:end

_(Specify SMB Version when Mounting Remote Shares)_?
: <select name="smb_version" size="1">
  <?=mk_option($cfg["Config"]["smb_version"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["smb_version"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_specify_smb_vers_plug:
> Set to **No** for Unassigned Devices to first try to mount remote shares by not setting the SMB version when mounting.
>
> Set to **Yes** for Unassigned Devices to only mount SMB remote shares specifying the SMB version.
>
> Some remote servers need to have the version specified.
:end

_(NFS Version to use when Mounting Remote Shares)_:
: <select name="nfs_version" size="1" <?if ((version_compare($version['version'],"6.9.9", "<")) || ($var['shareNFSEnabled']=="no")):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["nfs_version"], "0", "_(Auto)_");?>
  <?=mk_option($cfg["Config"]["nfs_version"], "4", "_(NFSv4)_");?>

  </select><?if ($var['shareNFSEnabled']=="no"):?>&nbsp;_(NFS must be enabled in Settings->NFS for NFS support)_.<?endif;?>

:ud_settings_specify_nfs_vers_plug:
> Set to **Auto** to mount all NFS Remote Shares auto negotiating the NFS version to use.
>
> If the **Auto** setting doesn't work or only mounts NFSv3, you need to use the **NFSv4** setting because your version of Unraid will not auto negotiate NFSv4.
:end

_(Debug Log Level)_:
: <select name="debug_level" size="1">
  <?=mk_option($cfg["Config"]["debug_level"], "0", "_(None)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "1", "_(Udev and Hotplug)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "2", "_(Refresh and Update)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "8", "_(Command times)_");?>
  </select>&nbsp;_(Use only when directed for support because the messages can flood the log)_.

:ud_settings_debug_level_plug:
> Setting a Debug Log Level adds additional logging in specific areas of UD for troubleshooting.  Set the Debug Log Level to debug a specific area of UD.
>
> Set to **None** to turn off debug logging.
>
> **Udev and Hotplug** udev, disk discovery and hotplug debug.
>
> **Refresh and Update** to find issues where UD hangs.
>
> **Command times** command execution times. **Warning:** very chatty.
>
> **Note:** Don't leave the Debug Log Level on for extended periods of time.  It can add a lot of log messages to the syslog.
:end

&nbsp;
: <input type="submit" value='_(Apply)_'><input type="button" value="_(Done)_" onclick="done()">
</form>
